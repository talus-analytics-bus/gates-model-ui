var App = App || {};

(function() {
	App.inputs = null; // stores inputs for the current browser session
	App.outputs = null; // stores all the outputs
	
	App.initialize = function() {
		// get cookies if its exists
		App.inputs = App.getCookie('inputs');
		App.outputs = App.getCookie('outputs');
		
		// clicking header in navbar navigates user to home screen
		$('.header-title').click(function() { hasher.setHash(''); });
		
		// setting noty defaults
		$.noty.defaults.layout = 'center';
		$.noty.defaults.type = 'warning';
	};
	
	App.runModel = function(inputs, callback) {
		NProgress.start();
		
		var now = new Date();
		console.log('starting model run...');

		$.get('/runModel', inputs)
			.always(function() {
				console.log('finished model run: ' + ((new Date() - now)/1000) + ' seconds');
				NProgress.done();
			})
			.fail(function() {
				callback('error', null);
			})
			.done(function(data) {
				if (data.hasOwnProperty('error')) callback(data.error, null);
				else callback(null, data);
			});
	};


	/* ---------------------------- Cookie Functions ------------------------------ */
	// stores a cookie with a given name, value, and expiration time, in days
	App.setCookie = function(cname, cvalue, exdays) {
		if (typeof cvalue === 'object') cvalue = JSON.stringify(cvalue);
		if (cvalue.length >= 4094) console.log('Cookie is too long! (over 4094 bytes)');
		if (typeof exdays === 'undefined') var exdays = 7;
		var d = new Date();
		d.setTime(d.getTime() + (exdays*24*60*60*1000));
		var expires = 'expires=' + d.toUTCString();
		document.cookie = cname + '=' + cvalue + '; ' + expires;
	};
	
	// retrieves the cookie with a given name
	App.getCookie = function(cname) {
		var name = cname + '=';
		var ca = document.cookie.split(';');
		for (var i = 0; i < ca.length; i++) {
			var c = ca[i].trim();
			if (c.indexOf(name) === 0) {
				var cookieStr = c.substring(name.length, c.length);
				return JSON.parse(cookieStr);
			}
		}
		return null;
	};
})();
var Routing = {};

(function() {
	// Precompiles all html handlebars templates on startup.
	// Compiling is front-loaded so the compiling does not happen on page changes. 
	var templates = {};
	Routing.precompileTemplates = function() {
	    $("script[type='text/x-handlebars-template']").each(function (i, e) {
	        templates[e.id.replace("-template", "")] = Handlebars.compile($(e).html());
	    });
	};	
    
    Routing.initializeRoutes = function() {        
        // setup crossroads for routing
        crossroads.addRoute('/', function() {
            loadTemplate('home');
            App.initInput();
            window.scrollTo(0, 0);
        });
        crossroads.addRoute('/output', function() {
        	loadTemplate('output');
        	App.initOutput();
        	window.scrollTo(0, 0);
        });
        crossroads.addRoute('/background', function() {
            loadTemplate('background');
            App.initBackground();
            window.scrollTo(0, 0);
        });

        // setup hasher for subscribing to hash changes and browser history
        hasher.prependHash = '';
        hasher.initialized.add(parseHash); //parse initial hash
        hasher.changed.add(parseHash); //parse hash changes
        hasher.init(); //start listening for history change
    };
	
    var parseHash = function(newHash) { crossroads.parse(newHash); };
    var loadTemplate = function(page, data) {
        $('#page-content').html(templates[page](data));
    };
})();

var Util = {};

Util.comma = d3.format(',f');
Util.decimalize = d3.format('.2f');
Util.percentize = d3.format('%'); // divides by 100 and adds a percentage symbol
Util.percentizeDiff = function(d) {
	if (d === 0) return '0%';
	else return d3.format('+%')(d);
};

// converts a number in string format into a float
Util.strToFloat = function(str) {
	if (typeof str !== 'string') return str;
	return parseFloat(str.replace(/[^\d\.\-]/g, ""));
};

// formats the value for an input
Util.formatInputVal = function(input) {
	input = $(input);
	var val = Util.strToFloat(input.val());
	var valText = Util.comma(val);
	if (input.hasClass('percent-input')) {
		val /= 100;
		if (isNaN(val) || val < 0) val = 0;
		else if (val > 100) val = 100;
		valText = Util.percentize(val);
	}
	input.val(valText);
	return val;
};

// get unique values from an array
Util.getUnique = function(array) {
	var result = [];
	for (var i = 0; i < array.length; i++) {
		if (result.indexOf(array[i]) === -1) result.push(array[i]);
	}
	return result;
};

// copies an object
Util.copyObject = function(obj) { return $.extend(true, {}, obj); };

var App = App || {};

(() => {
	App.initBackground = () => {

        $('.background-container').find('.container-text').slideDown();


	}
})();

var App = App || {};

(function() {
	App.initInput = function() {
		var windowWidth = $(window).width();
		
		if (App.inputs !== null) setExistingInputValues();
		
		// opening and closing input sections
		$('.input-section .title').click(function() {
			var contents = $(this).next().find('.input-subsection, .next-button-container');
			var isShowing = contents.is(':visible');
			if (isShowing) {
				contents.slideUp();
			} else {
				$(this).parent().siblings('.input-section').find('.input-subsection, .next-button-container').slideUp();
				contents.slideDown();
			}
		});
		$('.next-button-container .btn').click(function() {
			var valid = true;
			if ($(this).attr('name') === 'pop-age') valid = validatePopAgeSum();
			
			if (valid) {
				var mainContents = $(this).parent().parent();
				var contents = mainContents.find('.input-subsection, .next-button-container');
				contents.slideUp();
				mainContents.parent().next('.input-section').find('.input-subsection, .next-button-container').slideDown();
			}
		});
		
		
		/* --------------------- Population Section ----------------------- */
		var popAgeData = [
			{age: 'under 5', value: App.inputs ? App.inputs.pop1 : 0.18},
			{age: '5-15', value: App.inputs ? App.inputs.pop2 : 0.30},
			{age: '16+', value: App.inputs ? App.inputs.pop3 : 0.52},
		];
		
		// population age section
		d3.selectAll('.pop-age-table input')
			.property('value', function(d, i) { return Util.percentize(popAgeData[i].value); })
			.on('change', function(d, i) {
				popAgeData[i].value = Util.formatInputVal(this);
				checkPopAgeSum();
				updatePopAgeChart();
			});
		
		var checkPopAgeSum = function() {
			var sum = 0;
			for (var i = 0; i < popAgeData.length; i++) sum += popAgeData[i].value;
			$('.pop-age-table tbody tr:last-child td:nth-child(2)').text(Util.percentize(sum));
			if (Math.abs(sum - 1) < 0.001) {
				$('.pop-age-warning').slideUp();
				$('.pop-age-table input').css('background-color', 'white');
				return true;
			} else {
				$('.pop-age-warning').slideDown();
				$('.pop-age-table input').css('background-color', '#ffdbdb');
				return false;
			}
		};
		var validatePopAgeSum = function() {
			var valid = checkPopAgeSum();
			if (!valid) noty({text: '<b>Warning!</b><br>Age distributions must sum to 100%!'});
			return valid;
		};
		
		// build bar chart for the population age distribution
		var margin = {top: 25, right: 20, bottom: 48, left: 100};
		var chartWidth = (windowWidth < 440) ? windowWidth - 20 : 420;
		var width = chartWidth - margin.left - margin.right;
		var height = 200 - margin.top - margin.bottom;
   		var chart = d3.select('.pop-age-chart')
   			.attr('width', width + margin.left + margin.right)
   			.attr('height', height + margin.top + margin.bottom)
   			.append('g')
   				.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
   				
   		chart.append('text')
   			.attr('class', 'axis-label')
   			.attr('x', width/2)
   			.attr('y', height + 45)
   			.text('Age');

		var x = d3.scale.ordinal()
			.domain(popAgeData.map(function(d) { return d.age; }))
			.rangeRoundBands([0, width], 0.2);
		var xAxis = d3.svg.axis().scale(x)
			.orient('bottom');
		var xAxisG = chart.append('g')
			.attr('class', 'x axis')
			.attr('transform', 'translate(0,' + height + ')')
			.call(xAxis);
			
		var y = d3.scale.linear()
			.domain([0, 1])
			.range([height, 0]);
		var yAxis = d3.svg.axis()
			.orient('left')
			.ticks(5)
			.tickFormat(Util.percentize)
			.innerTickSize(-width)
			.outerTickSize(0)
			.scale(y);
		var yAxisG = chart.append('g')
			.attr('class', 'y axis')
			.call(yAxis);
				
		var updatePopAgeChart = function() {
			var bars = chart.selectAll('rect')
				.data(popAgeData);
			var newBars = bars.enter().append('rect');
			bars
				.attr('x', function(d) { return x(d.age); })
				.attr('y', function(d) { return y(d.value); })
				.attr('width', x.rangeBand())
				.attr('height', function(d) { return height - y(d.value); });
			bars.exit().remove();
		};
		updatePopAgeChart();
		
		
		/* --------------------- Schisto Section ----------------------- */
		// tooltip for schisto prevalence
		$('.schisto-prevalence-container .explanation-icon').tooltipster({
			maxWidth: 350,
			contentAsHTML: true,
			content: '<b>Schistosomiasis prevalence</b> indicates the percentage of the population currently ' +
				'infected with schistosomiasis (medium-high intensity).'
		});
		
		// picking a schistosomiasis prevalence
		$('.schisto-prevalence').on('change', function() {
			var val = Math.round(Util.strToFloat($(this).val()));
			if (isNaN(val)) {
				noty({text: '<b>Error!</b><br>Please select a valid number for schistosomiasis prevalence.'});
				$(this).val(Util.percentize(0.45));
			} else if (val <= 0) {
				noty({text: '<b>Warning!</b><br>The percentage for schistosomiasis prevalence must be <b>greater than 0%</b>.'});
				$(this).val(Util.percentize(0.01));
			} else if (val > 100) {
				noty({text: '<b>Warning!</b><br>The maximum percentage for schistosomiasis prevalence is <b>100%</b>.'});
				$(this).val(Util.percentize(1));
			} else {
				$(this).val(Util.percentize(val/100));
			}
		});
		
		// multiselect for age range
		$('.schisto-age-select').multiselect();
		
		
		/* --------------------- Malaria Section ----------------------- */
		// malaria transmission pattern
		$('.malaria-timing-select').on('change', function() {
			if ($(this).val() === 'seasonal') $('.malaria-month-container').slideDown();
			else $('.malaria-month-container').slideUp();
		});
		$('.malaria-month-label').click(function() {
			var $checkbox = $(this).prev();
			$checkbox.prop('checked', !$checkbox.is(':checked'));
		});
		
		
		// checkboxes for IRS and ITN
		$('.irs-checkbox').on('change', function() { irsChange(); });
		$('.irs-checkbox-label').on('click', function() {
			$('.irs-checkbox').prop('checked', !$('.irs-checkbox').is(':checked'));
			irsChange();
		});
		var irsChange = function() {
			$('.irs-true-contents').slideToggle();
			updateDistributionBlock();
		};
		$('.itn-checkbox').on('change', function() { itnChange(); });
		$('.itn-checkbox-label').on('click', function() {
			$('.itn-checkbox').prop('checked', !$('.itn-checkbox').is(':checked'));
			itnChange();
		});
		var itnChange = function() {
			$('.itn-true-contents').slideToggle();
			updateDistributionBlock();
		};
		var updateDistributionBlock = function() {
			var show = $('.irs-checkbox').is(':checked') && $('.itn-checkbox').is(':checked');
			if (show) $('.input-subsection[name="distribution-strategy"]').slideDown();
			else $('.input-subsection[name="distribution-strategy"]').slideUp();
		};
		
		
		/* --------------------- Submission ----------------------- */
		// submit button
		$('.input-submit-button').click(function() {
			// calculate malaria peak months
			var malariaPeakMonths = [];
			d3.selectAll('.malaria-month-container input').each(function(d, i) {
				if ($(this).is(':checked')) malariaPeakMonths.push(i+1);
			});
			console.log(malariaPeakMonths);
			
			// define user inputs
			var inputs = {
				n_people: 2000,
				pop1: Util.strToFloat($('.pop-age-table tbody tr:first-child input').val()) / 100, // age distribution for under 5
				pop2: Util.strToFloat($('.pop-age-table tbody tr:nth-child(2) input').val()) / 100, // age distribution for 5-15
				pop3: Util.strToFloat($('.pop-age-table tbody tr:nth-child(3) input').val()) / 100, // age distribution for 16+
				schisto_prevalence: Util.strToFloat($('.schisto-prevalence').val()) / 100, // schistosomiasis prevalence percentage
				schisto_coverage: Util.strToFloat($('.schisto-coverage-select').val()), // target % coverage for schisto
				schisto_age_range: $('.schisto-age-select').val(), // schisto age range
				schisto_month_num: $('.schisto-month-select').val(), // schisto distribution time
				malaria_timing: $('.malaria-timing-select').val(), // malaria timing
				malaria_peak_month_num: malariaPeakMonths, // array of malaria peak transmission month numbers (1-Jan, 2-Feb, etc.)
				malaria_rate: Util.strToFloat($('.malaria-trans-rate-select').val()), // malaria transmission rate
				irs: $('.irs-checkbox').is(':checked') ? 1 : 0, // whether IRS is an option
				irs_coverage: Util.strToFloat($('.irs-coverage-select').val()), // IRS target % coverage
				irs_month_num: $('.irs-month-select').val(), // IRS distribution month number (1-Jan, 2-Feb, etc.)
				itn: $('.itn-checkbox').is(':checked') ? 1 : 0, // whether ITN is an option
				itn_coverage: Util.strToFloat($('.itn-coverage-select').val()), // ITN target % coverage
				itn_month_num: $('.itn-month-select').val() // ITN distribution month number (1-Jan, 2-Feb, etc.)
			};

			/* -------- Validation -------- */
			// validate that the population age distribution sums to 100%
			if (validatePopAgeSum() === false) {
				noty({text: '<b>Error!</b><br>Please make sure the age distribution in the population section adds up to 100%!'});
				return false;
			}
			
			// validate that an age range was chosen
			if (inputs.schisto_age_range === null) {
				noty({
					text: '<b>Error!</b><br>Please select an age range for praziquantel ' +
						'mass drug administration under the schistosomiasis section.'
				});
				return false;
			}
			
			// validate that either IRS or ITN was chosen
			if (!inputs.irs && !inputs.itn) {
				noty({text: '<b>Error!</b><br>Please select either <b>IRS</b> or <b>ITN</b> as an option for treatment of malaria.'});
				return false;
			}
			
			// check that a malaria peak transmission month has been picked if seasonal
			if (inputs.malaria_timing === 'seasonal' && inputs.malaria_peak_month_num.length === 0) {
				noty({text: '<b>Error!</b><br>Please select at least 1 peak transmission month for malaria.'});
				return false;
			}

			// check if every month was picked
			if (inputs.malaria_timing === 'seasonal' && inputs.malaria_peak_month_num.length === 12) {
				noty({
					text: '<b>Error!</b><br>For a <b>seasonal</b> malaria transmission pattern, please select less than <b>12</b> ' + 
						'peak transmission months'
				});
				return false;
			}
			/* -------- -------- --------*/
			
			
			// validation completed, save inputs
			App.inputs = inputs;
			
			// define parameters for model runs; one run with integration, one without
			var inputsWithIntegration = Util.copyObject(App.inputs);
			inputsWithIntegration.use_integration = 1;
			
			var inputsWithoutIntegration = Util.copyObject(App.inputs);
			inputsWithoutIntegration.use_integration = 0;
			
			// run model twice, save outputs, redirect to output page
			queue()
				.defer(App.runModel, inputsWithIntegration)
				.defer(App.runModel, inputsWithoutIntegration)
				.await(function(error, outputWith, outputWithout) {
					if (error) {
						console.log('failed to complete all model runs');
						console.log(error);
						noty({type: 'alert', text: '<b>Error!</b><br>There was an error running the model. Please contact the developers.'});
						return false;
					}
					App.outputs = {
						'integrated': outputWith,
						'separate': outputWithout
					};
					
					// set cookies
					App.setCookie('inputs', App.inputs);
					App.setCookie('outputs', App.outputs);
					
					hasher.setHash('output');
				});
		});
		
		
		// slide open first input section
		$('.input-section[name="pop-age"]').find('.input-subsection, .next-button-container').slideDown();
	};
	
	var setExistingInputValues = function() {
		// set inputs in schisto section
		$('.schisto-coverage-select').val(String(App.inputs.schisto_coverage));
		$('.schisto-age-select').val(App.inputs.schisto_age_range);
		$('.schisto-month-select').val(App.inputs.schisto_month_num);
		
		// set inputs in malaria section
		$('.malaria-timing-select').val(App.inputs.malaria_timing);
		if (App.inputs.malaria_timing === 'constant') $('.malaria-month-container').hide();		
		d3.selectAll('.malaria-month-container input').property('checked', function(d, i) {
			return App.inputs.malaria_peak_month_num.indexOf(i+1) > -1;
		});
		$('.malaria-trans-rate-select').val(App.inputs.malaria_rate);
		
		$('.irs-checkbox').prop('checked', App.inputs.irs);
		if (!App.inputs.irs) $('.irs-true-contents').hide();
		$('.irs-coverage-select').val(App.inputs.irs_coverage);
		$('.irs-month-select').val(App.inputs.irs_month_num);
		
		$('.itn-checkbox').prop('checked', App.inputs.itn);
		if (!App.inputs.itn) $('.itn-true-contents').hide();
		$('.itn-coverage-select').val(App.inputs.itn_coverage);
		$('.itn-month-select').val(App.inputs.itn_month_num);
	};
})();

var App = App || {};

(function() {
	App.initOutput = function() {
		if ($.isEmptyObject(App.outputs)) {
			hasher.setHash('');
			return false;
		}
		
		// define variables
		var windowWidth = $(window).width();
		var isSeasonal = (App.inputs.malaria_timing === 'seasonal');


		// determine recommendation
		var isRecommended = (App.outputs.separate.malaria - App.outputs.integrated.malaria >= 0.05);
		var recOutput = isRecommended ? App.outputs.integrated : App.outputs.separate;

		// update recommendation text
		d3.select('.output-recommendation-text')
			.text(isRecommended ? 'INTEGRATED INTERVENTIONS' : 'NON-INTEGRATED INTERVENTIONS')
			.classed('text-success', isRecommended);
			
		// attach tooltip to question mark beside rec text
		var nonIntContentStr = '<b>Non-integrated interventions</b> represents the current strategy using the ' +
			'user-supplied schedule for schistosomiasis and malaria control measures';
		var intContentStr = '<b>Integrated interventions</b> entails distributing schistosomiasis and malaria ' +
			'control measures together and prior to any seasonal increase in malaria transmission.';
		var recContentStr = 'This is the <b>recommended</b> strategy for the user.';
		if (isRecommended) intContentStr += ' ' + recContentStr;
		else nonIntContentStr += ' ' + recContentStr;
		$('.output-recommendation .explanation-icon').tooltipster({
			maxWidth: 450,
			contentAsHTML: true,
			content: nonIntContentStr + '<br><br>' + intContentStr
		});
		
		// fill table showing prevalence
		d3.selectAll('.output-table tbody tr').each(function(d, i) {
			var outputs = (i === 0) ? App.outputs.separate : App.outputs.integrated;
			
			// populate cells with prevalence value
			var cells = d3.select(this).selectAll('td:nth-child(3), td:nth-child(4)').text(function(dd, j) {
				var val = (j === 0) ? outputs.schisto : outputs.malaria;
				return Util.percentize(val);
			});
			
			// apply green or red to "with integration" cells
			if (i === 1) {
				cells
					.classed('text-success', function(dd, j) {
						var disease = (j === 0) ? 'schisto' : 'malaria';
						return (Math.round(100*App.outputs.separate[disease]) - Math.round(100*App.outputs.integrated[disease]) >= 2);
					})
					.classed('text-danger', function(dd, j) {
						var disease = (j === 0) ? 'schisto' : 'malaria';
						return (Math.round(100*App.outputs.integrated[disease]) - Math.round(100*App.outputs.separate[disease]) >= 2);
					});
			}
		});
		
		// add arrow to recommended row for prevalence
		var recRowNum = isRecommended ? 2 : 1;
		d3.select('.output-table tbody tr:nth-child(' + recRowNum + ') td:first-child').append('img')
			.attr('class', 'arrow-icon')
			.attr('src', 'img/chevron_right.png');
		
		// build bar chart for the population age distribution
		var barData = [
			{type: 'without integration', disease: 'schisto', value: App.outputs.separate.schisto},
			{type: 'without integration', disease: 'malaria', value: App.outputs.separate.malaria},
			{type: 'with integration', disease: 'schisto', value: App.outputs.integrated.schisto},
			{type: 'with integration', disease: 'malaria', value: App.outputs.integrated.malaria}
		];
		
		var margin = {top: 10, right: 20, bottom: 80, left: 65};
		var chartWidth = (windowWidth < 670) ? windowWidth - 20 : 650;
		var width = chartWidth - margin.left - margin.right;
		var height = 300 - margin.top - margin.bottom;
   		var chart = d3.select('.output-bar-chart')
   			.attr('width', width + margin.left + margin.right)
   			.attr('height', height + margin.top + margin.bottom)
   			.append('g')
   				.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

		var x = d3.scale.ordinal()
			.domain(Util.getUnique(barData.map(function(d) { return d.disease; })))
			.rangeRoundBands([0, width], 0.5);
		var xAxis = d3.svg.axis().scale(x)
			.orient('bottom');
		var xAxisG = chart.append('g')
			.attr('class', 'x axis')
			.attr('transform', 'translate(0,' + height + ')')
			.call(xAxis);
			
		var y = d3.scale.linear()
			.domain([0, 1])
			.range([height, 0]);
		var yAxis = d3.svg.axis()
			.orient('left')
			.ticks(5)
			.tickFormat(Util.percentize)
			.innerTickSize(-width)
			.outerTickSize(0)
			.scale(y);
		var yAxisG = chart.append('g')
			.attr('class', 'y axis')
			.call(yAxis);
		
		// bars
		var bars = chart.selectAll('rect')
			.data(barData);
		var newBars = bars.enter().append('rect')
			.attr('class', 'bar');
			
		bars
			.style('fill', function(d) { return (d.type === 'without integration') ? 'url(#diagonal-stripe-1)' : 'steelblue'; })
			.attr('x', function(d) {
				var xVal = x(d.disease) - 20;
				if (d.type === 'with integration') xVal += 40;
				return xVal;
			})
			.attr('y', function(d) { return y(d.value); })
			.attr('width', x.rangeBand())
			.attr('height', function(d) { return height - y(d.value); });
		bars.exit().remove();
		
		// add axis label
		chart.append('text')
			.attr('class', 'axis-label')
			.attr('transform', 'rotate(-90)')
			.attr('x', -height/2)
			.attr('y', -55)
			.text('% Prevalence');
		
		// add legend
		var legendXCoord = (chartWidth < 450) ? 0 : (chartWidth-450)/2;
		var legend = chart.append('g')
			.attr('class', 'legend')
			.attr('transform', 'translate(' + legendXCoord + ',' + (height+50) + ')');
		var legendGroups = legend.selectAll('g')
			.data(Util.getUnique(barData.map(function(d) { return d.type; })))
			.enter().append('g')
				.attr('transform', function(d, i) { return 'translate(' + (200*i) + ')'; });
		legendGroups.append('rect')
			.attr('width', 15)
			.attr('height', 15)
			.style('fill', function(d) { return (d === 'without integration') ? 'url(#diagonal-stripe-1)' : 'steelblue'; });
		legendGroups.append('text')
			.attr('transform', 'translate(25,13)')
			.text(function(d) { return d; });
		
		
		// add tooltips to question marks
		$('.output-table-container .explanation-icon:first-child').tooltipster({
			maxWidth: 400,
			contentAsHTML: true,
			content: 'The values shown are prevalence values for schistosomiasis and malaria when ' +
				'<b>non-integrated interventions</b> are used'
		});
		$('.output-table-container .explanation-icon:nth-child(2)').tooltipster({
			maxWidth: 450,
			contentAsHTML: true,
			content: 'The values shown are prevalence values for schistosomiasis and malaria when ' +
				'<b>integrated interventions</b> are used. ' +
				'<br><br>Values are colored <b>green</b> if there is a non-trival reduction in prevalence (> 1% reduction). ' + 
				'<br><br>Values are colored <b>red</b> if there is a non-trivial increase in prevalence (> 1% increase).'
		});
			
		
		/* ----------------------- Distribution Strategy Table ------------------------------- */
		var formatMonth = function(monthNum) {
			return d3.time.format('%B')(new Date(2015, monthNum-1, 1, 0, 0, 0, 0));
		};
		
		// update control measure recommended execution times
		d3.select('#rec_pzq_month').text(formatMonth(recOutput.pzq_month));
		
		if (App.inputs.irs) d3.select('#rec_spray_month').text(formatMonth(recOutput.spray_month));
		else $('.output-strategy-table tbody tr:nth-child(2)').hide();
		
		if (App.inputs.itn) d3.select('#rec_net_month').text(formatMonth(recOutput.net_month));
		else $('.output-strategy-table tbody tr:nth-child(3)').hide();


		/* ----------------------- Distribution Strategy Timeline ------------------------------- */
		var currMonthsEqualRec = (+App.inputs.schisto_month_num === +recOutput.pzq_month &&
			+App.inputs.irs_month_num === +recOutput.spray_month &&
			+App.inputs.itn_month_num === +recOutput.net_month);
		var timelineMargin = {top: 20, right: 105, bottom: (isSeasonal ? 105 : 70), left: 105};
		var timelineTotalWidth = (windowWidth < 820) ? windowWidth - 20 : 800;
		var timelineWidth = timelineTotalWidth - margin.left - margin.right;
		var timHeight = 60;
		var timSep = 20;
		var timelineHeight = currMonthsEqualRec ? timHeight : 2*timHeight + timSep;
		var timeline = d3.select('.output-timeline')
			.attr('width', timelineWidth + timelineMargin.left + timelineMargin.right)
			.attr('height', timelineHeight + timelineMargin.top + timelineMargin.bottom)
			.append('g')
				.attr('transform', 'translate(' + timelineMargin.left + ',' + timelineMargin.top + ')');
		
		var timelineCurr = timeline.append('g')
			.attr('class', 'timeline-group');
		var timelineRec = timeline.append('g')
			.attr('class', 'timeline-group')
			.attr('transform', 'translate(0,' + (timHeight+timSep) + ')');
		var timelineGroups = timeline.selectAll('.timeline-group');
		timelineCurr.append('rect')
			.attr('class', 'timeline-base')
			.attr('width', timelineWidth)
			.attr('height', timHeight);
		timelineRec.append('rect')
			.attr('class', 'timeline-base')
			.attr('width', timelineWidth)
			.attr('height', timHeight);

		// establish dates
		var getMonthXCoord = function(monthNum) { return timelineX(new Date(2015, monthNum-1, 1, 0, 0, 0, 0)); };
		var startTime = new Date(2015, 0, 1, 0, 0, 0, 0); // 3 months before seasonal starts
		var endTime = new Date(2016, 0, 1, 0, 0, 0, 0);
		
		// establish timeline axis
		var timelineX = d3.time.scale()
			.domain([startTime, endTime])
			.range([0, timelineWidth]);
		var timelineXAxis = d3.svg.axis().scale(timelineX)
			.tickFormat(d3.time.format('%b'))
			.orient('bottom');
		timeline.append('g')
			.attr('class', 'x axis')
			.attr('transform', 'translate(0,' + timelineHeight + ')')
			.call(timelineXAxis);

		// adjust axes labels
		$('.output-timeline .x.axis .tick text')
			.attr('x', timelineWidth/24)
			.attr('y', 8)
			.last()
				.css('display', 'none');
		
		// add seasonal bar
		if (isSeasonal) {
			timelineGroups.selectAll('.timeline-seasonal-base')
				.data(App.inputs.malaria_peak_month_num)
				.enter().append('rect')
					.attr('class', 'timeline-seasonal-base')
					.attr('x', function(d) { return getMonthXCoord(d); })
					.attr('width', function(d) { return getMonthXCoord(+d+1) - getMonthXCoord(d); })
					.attr('height', timHeight);
		}
			
		// add labels
		var currLabel = timelineCurr.append('text')
			.attr('class', 'y-label')
			.attr('x', -15)
			.attr('y', timHeight/2 + 3)
			.text('current');
		if (currMonthsEqualRec) {
			currLabel
				.attr('x', -33)
				.attr('y', timHeight/2 - 6);
			timelineCurr.append('text')
				.attr('class', 'y-label')
				.attr('x', -10)
				.attr('y', timHeight/2 + 10)
				.text('(recommended)');
		} else {
			timelineRec.append('text')
				.attr('class', 'y-label')
				.attr('x', -15)
				.attr('y', timHeight/2 + 3)
				.text('recommended');
		}
		
		// draw rectangles showing mitigation strategies
		var markerHeight = 10;
		var drawStrat = function(t, monthNum, text, yVal) {
			// calculate x-coordinates for the month supplied
			if (typeof monthNum === 'string') monthNum = +monthNum;
			var monthXCoord = getMonthXCoord(monthNum);
			var nextMonthXCoord = getMonthXCoord(monthNum+1);
			
			// draw the marker
			var stratGroup = t.append('g')
				.attr('class', 'strat-group')
				.attr('transform', 'translate(' + monthXCoord + ',' + yVal + ')');
			stratGroup.append('rect')
				.attr('class', 'strat-marker')
				.attr('y', -markerHeight/2)
				.attr('width', nextMonthXCoord - monthXCoord)
				.attr('height', markerHeight);
			var label = stratGroup.append('text')
				.attr('x', -7)
				.attr('y', 4)
				.text(text);
			if (monthXCoord === 0) {
				label
					.style('text-anchor', 'start')
					.attr('x', nextMonthXCoord + 7);
			}
			return monthXCoord;
		};
		
		var numTreats = App.inputs.itn + App.inputs.irs + 1;
		var treatCoords = (numTreats === 2) ? [20, 40] : [12, 30, 48];
		var currPzqX = drawStrat(timelineCurr, App.inputs.schisto_month_num, 'PZQ', treatCoords[0]);
		var recPzqX = drawStrat(timelineRec, recOutput.pzq_month, 'PZQ', treatCoords[0]);
		if (App.inputs.irs) {
			var currIrsX = drawStrat(timelineCurr, App.inputs.irs_month_num, 'IRS', treatCoords[1]);
			var recIrsX = drawStrat(timelineRec, recOutput.spray_month, 'IRS', treatCoords[1]);
		}
		if (App.inputs.itn) {
			var currItnX = drawStrat(timelineCurr, App.inputs.itn_month_num, 'ITN', (numTreats === 2) ? treatCoords[1] : treatCoords[2]);
			var recItnX = drawStrat(timelineRec, recOutput.net_month, 'ITN', (numTreats === 2) ? treatCoords[1] : treatCoords[2]);
		}
		
		// draw borders around timelines
		timelineGroups.append('line')
			.attr('class', 'strat-divider')
			.attr('x2', timelineWidth)
			.attr('y1', 0)
			.attr('y2', 0);
		timelineGroups.append('line')
			.attr('class', 'strat-divider')
			.attr('x2', timelineWidth)
			.attr('y1', timHeight)
			.attr('y2', timHeight);
			
		// add legend
		var timelineLegend = timeline.append('g')
			.attr('class', 'timeline-legend')
			.attr('transform', 'translate(0,' + (timelineHeight+50) + ')');
		if (isSeasonal) {
			var seasonalGroup = timelineLegend.append('g')
				.attr('transform', 'translate(222,0)');
			seasonalGroup.append('rect')
				.attr('class', 'timeline-seasonal-base')
				.attr('y', -1)
				.attr('width', 60)
				.attr('height', 16);
			seasonalGroup.append('text')
				.attr('class', 'legend-text')
				.attr('x', 75)
				.attr('y', 12)
				.text('Malaria Season');
		}
		var legendStratGroup = timelineLegend.append('g')
			.attr('transform', 'translate(222,' + (isSeasonal ? 30 : 0) + ')');
		legendStratGroup.append('rect')
			.attr('class', 'strat-marker')
			.attr('y', 2)
			.attr('width', 60)
			.attr('height', markerHeight);
		legendStratGroup.append('text')
			.attr('x', 75)
			.attr('y', 12)
			.text('Distribution of Treatment');


		// populate timeline recommendation text
		if (currMonthsEqualRec) {
			$('.output-timeline-rec-text').html('The <b>current</b> distribution times used for PZQ, IRS, and ITN are also the <b>recommended</b> distribution times.');
			timelineGroups.style('display', function(d, i) { if (i === 1) return 'none'; });
		} else {
			var recText = '';
			var treats = [];
			if (recPzqX < currPzqX) treats.push('<b>PZQ</b>');
			if (recIrsX < currIrsX) treats.push('<b>IRS</b>');
			if (recItnX < currItnX) treats.push('<b>ITN</b>');
			if (treats.length > 0) {
				var ttext = (treats.length === 1) ? 'treatment' : 'treatments';
				var verb = (treats.length === 1) ? 'is' : 'are';
				recText += 'It is recommended that the ' + ttext + ', ' + treats.join(', ') + ', ' + verb + ' applied at an earlier time.';
			}
	
			treats = [];
			if (recPzqX > currPzqX) treats.push('<b>PZQ</b>');
			if (recIrsX > currIrsX) treats.push('<b>IRS</b>');
			if (recItnX > currItnX) treats.push('<b>ITN</b>');
			if (treats.length > 0) {
				if (recText.length > 0) recText += '<br>';
				var etext = (treats.length === 1) ? 'treatment' : 'treatments';
				var verb = (treats.length === 1) ? 'is' : 'are';
				recText += 'It is recommended that the ' + etext + ', ' + treats.join(', ') + ', ' + verb + ' applied at a later time.';
			}
			$('.output-timeline-rec-text').html(recText);
		}


		/* ----------------------- Assumptions & Back to Inputs ------------------------------- */
		// toggling display of assumptions
		$('.assumption-bar').on('click', function() {
			var $bar = $(this);
			var $contents = $('.assumption-contents');
			var isHiding = $contents.is(':visible');
			$contents.slideToggle();
			$bar.find('.down-arrow').toggleClass('rotated');
			$bar.find('span').text(isHiding ? 'show assumptions' : 'hide assumptions');
		});
		
		
		// back to inputs button
		$('.input-back-button').click(function() { hasher.setHash(''); });
	};
})();

var App = App || {};

(function() {
	var init = function() {
		App.initialize();
		Routing.precompileTemplates();	
		Routing.initializeRoutes();
	};	
	init();
})();